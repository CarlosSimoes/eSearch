<?xml version="1.0" encoding="utf-8"?>
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*"
				   xmlns:Search="widgets.eSearch.*"
				   height="200" width="800"
				   widgetConfigLoaded="init()" verticalScrollPolicy="off">
	
	<fx:Declarations>
		<s:Move id="panelOut" yTo="0" duration="0" startDelay="0"/>
		<s:Move id="panelIn" yTo="175" duration="2000" startDelay="0"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.layers.FeatureLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.supportClasses.CodedValue;
			import com.esri.ags.layers.supportClasses.CodedValueDomain;
			import com.esri.ags.layers.supportClasses.FeatureType;
			import com.esri.ags.layers.supportClasses.LayerDetails;
			import com.esri.ags.layers.supportClasses.TableDetails;
			import com.esri.ags.portal.PopUpRenderer;
			import com.esri.ags.portal.supportClasses.PopUpInfo;
			import com.esri.ags.portal.supportClasses.PopUpMediaInfo;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.BaseWidget;
			import com.esri.viewer.IBaseWidget;
			import com.esri.viewer.ViewerContainer;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IViewCursor;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.core.FlexGlobals;
			import mx.core.Repeater;
			import mx.core.UIComponent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.events.MoveEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.Button;
			import spark.components.DataGrid;
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridEvent;
			import spark.formatters.CurrencyFormatter;
			import spark.formatters.DateTimeFormatter;
			import spark.formatters.NumberFormatter;
			
			import widgets.eSearch.skins.PopUpRendererSkin;
			
			[Bindable]
			private var appWidth:Number;
			
			private var _data:Array;
			private var _rdata:Array;
			private var _graLyr:GraphicsLayer;
			private var _featLayer:FeatureLayer;
			private var highlightedGraphic:Graphic;
			private var _zoomScale:Number = 5000;
			private var _zoomPercent:Number = 1.2;
			private var _bWidget:*;
			private var _dgColumns:Array=[];
			private var _dgFieldAliases:Object;
			private var _dgHyperColumns:Array=[];
			
			private var _rdgColumns:Array=[];
			private var _rdgFieldAliases:Object;
			private var _rdgHyperColumns:Array=[];
			private var rhypercols:ArrayCollection;
			private var hypercols:ArrayCollection;
			private var _csvName:String;
			private var _rcsvName:String;
			private var dateFormatter:DateTimeFormatter = new DateTimeFormatter();
			private var numFormatter:NumberFormatter = new NumberFormatter();
			private var currFormatter:CurrencyFormatter = new CurrencyFormatter();
			private var _dateFormat:String = "";
			private var _currFormat:String = "";
			private var _numFormat:String = "";
			private var _csvSep:String = ",";
			private var _layerDetails:* = null;
			private var _rlayerDetails:* = null;
			[Bindable] private var _exp2csvBtnLbl:String;
			[Bindable] private var _exp2txtBtnLbl:String;
			[Bindable] private var _exportButtonLbl:String;
			[Bindable] private var _enableExport:Boolean;
			[Bindable] private var sumVisible:Boolean;
			[Bindable] private var _labelSum:String;
			[Bindable] private var _hasRelates:Boolean;
			[Bindable] private var _relateTooltip:String = "Show Relates";
			[Bindable] private var _relateIcon:String = "widgets/eSearch/assets/images/i_relate.png";
			private var _sumField:String = "";
			private var sortDetails:String = "";
			private var rsortDetails:String = "";
			
			[Bindable] private var _widgetInteract:Boolean;
			[Bindable] private var _disableRelateTab:Boolean;
			
			[Bindable] private var _renableExport:Boolean;
			[Bindable] private var rsumVisible:Boolean;
			[Bindable] private var _rlabelSum:String;
			private var _rsumField:String = "";
			
			private var sortAC:ArrayCollection;
			private var dgSort:Sort = new Sort();
			private var rsortArr:Array = [];
			private var rsortAC:ArrayCollection;
			private var rdgSort:Sort = new Sort();
			
			private var sumFormat:String;
			
			private var rsumFormat:String;
			
			private var mWidgetTitle:String;
			
			private var uic:UIComponent;
			
			private var popUpRenderer:PopUpRenderer = new PopUpRenderer();
			
			private var Hits:Array = new Array();
			
			private var useUTC:Boolean;
			
			[Embed(source="widgets/eSearch/assets/images/i_relate.png")]
			public var relateClass:Class;
			
			private var autoHide:Boolean;
			
			private var movingPanel:Boolean;
			
			private function init():void
			{
				if (configXML){
					autoHide = configXML.autohide && configXML.autohide == "true";
					if(autoHide){
						movingPanel = true;
						panelIn.target = panel;
						panelOut.target = panel;
						panelIn.play();
					}
				}
				AppEvent.addListener(AppEvent.DATA_PUBLISH, sharedDataUpdated);
				appWidth = FlexGlobals.topLevelApplication.width;
			}
			
			public function set zoomScale(value:Number):void
			{
				_zoomScale = value;
			}
			
			public function set zoomPercent(value:Number):void
			{
				_zoomPercent = value;
			}
			
			public function set hasRelates(value:Boolean):void
			{
				_hasRelates = value;
			}
			
			private function sumField(value:String):void
			{
				_sumField = value;
				if(value != ""){
					sumVisible = true;
				}else{
					sumVisible = false;
				}
			}
			
			private function rsumField(value:String):void
			{
				_rsumField = value;
				if(value != ""){
					rsumVisible = true;
				}else{
					rsumVisible = false;
				}
			}
			
			private function dgColumns(value:Array):void
			{
				resultsGrid.columns = null;
				sumFormat = "";
				sortDetails = "";
				sortAC = new ArrayCollection();
				_dgColumns = value;
				var args:Array;
				var sortFld:SortField;
				var dgCol:GridColumn;
				var jdgCol:joinDataGridColumn;
				var dgColArr:ArrayList = new ArrayList();
				if(_hasRelates){
					dgCol = new GridColumn();
					dgCol.dataField = "icon";
					dgCol.width = 65;
					dgCol.dataTipField = _relateIcon;
					dgCol.showDataTips = false;
					dgCol.headerText = "Relate(s)";
					dgCol.labelFunction = getFileName;
					dgCol.itemRenderer = new ClassFactory(widgets.eSearch.HyperLinkIconColumn);
					dgColArr.addItem(dgCol);
				}
				for(var i:int=0; i < _dgColumns.length; i++){
					var cArr:Array = _dgColumns[i].split("~");						
					dgCol= new GridColumn(cArr[0]);
					if(cArr[0].indexOf( "." ) != -1){
						jdgCol= new joinDataGridColumn(cArr[0]);
						jdgCol.labelFunction = getLabel;
						if (cArr[2] != "NA"){
							jdgCol.labelFunction = getDateLbl;
							_dateFormat = cArr[2];
						}
						if (cArr[3] != "NA"){
							jdgCol.labelFunction = getCurrLbl;
							_currFormat = cArr[3];
							if(cArr[0] == _sumField){
								sumFormat = "cur";
							}
						}
						if (cArr[4] != "NA"){
							jdgCol.labelFunction = getNumLbl;
							_numFormat = cArr[4];
							if(cArr[0] == _sumField){
								sumFormat = "num";
							}
						}
						if (cArr[5] != "NA"){
							if(cArr[5] =="true"){
								useUTC = true;
							}else{
								useUTC = false;
							}
						}
						if (cArr[6] != "NA"){
							sortDetails = cArr[6];
							args = sortDetails.split("|");
							jdgCol.sortDescending = (args[0] == "asc")?false:true;
							if(args[2] == "date"){
								jdgCol.sortCompareFunction = date_sortCompareFunc;
							}
							sortAC.addItem({data: jdgCol,index: parseInt(args[1])});
						}
						if (_dgFieldAliases){
							jdgCol.headerText = _dgFieldAliases[cArr[0]];
						}
						if (cArr[1] != "NA" && cArr[6] != null){
							jdgCol.headerText = cArr[1];
						}
						dgColArr.addItem(jdgCol);
					}else{
						dgCol= new GridColumn(cArr[0]);
						dgCol.labelFunction = getLabel;
						if (cArr[2] != "NA"){
							dgCol.labelFunction = getDateLbl;
							_dateFormat = cArr[2];
						}
						if (cArr[3] != "NA"){
							dgCol.labelFunction = getCurrLbl;
							_currFormat = cArr[3];
							if(cArr[0] == _sumField){
								sumFormat = "cur";
							}
						}
						if (cArr[4] != "NA"){
							dgCol.labelFunction = getNumLbl;
							_numFormat = cArr[4];
							if(cArr[0] == _sumField){
								sumFormat = "num";
							}
						}
						if (cArr[5] != "NA"){
							if(cArr[5] =="true"){
								useUTC = true;
							}else{
								useUTC = false;
							}
						}
						if (cArr[6] != "NA" && cArr[6] != null){
							sortDetails = cArr[6];
							args = sortDetails.split("|");
							dgCol.sortDescending = (args[0] == "asc")?false:true;
							if(args[2] == "date"){
								dgCol.sortCompareFunction = date_sortCompareFunc;
							}
							sortAC.addItem({data: dgCol,index: parseInt(args[1])});
						}
						if (_dgFieldAliases){
							dgCol.headerText = _dgFieldAliases[cArr[0]];
						}
						if (cArr[1] != "NA"){
							dgCol.headerText = cArr[1];
						}
						dgColArr.addItem(dgCol);
					}
				}
				dgCol = new GridColumn("oid");
				dgCol.visible = false;
				dgColArr.addItem(dgCol);
				resultsGrid.columns = dgColArr;
				(resultsGrid.columns.getItemAt(resultsGrid.columnsLength - 1) as GridColumn).width = NaN;
			}
			
			private function date_sortCompareFunc(itemA:Object, itemB:Object, column:GridColumn = null):int
			{
				var dateA:Date = new Date(itemA[column.dataField]);
				var dateB:Date = new Date(itemB[column.dataField]);
				return ObjectUtil.dateCompare(dateA, dateB);
			}

			private function rdgColumns(value:Array):void
			{
				relatesGrid.columns = null;
				rsumFormat = "";
				rsortDetails = "";
				_rdgColumns = value;
				rsortArr = [];
				rsortAC = new ArrayCollection();
				var args:Array;
				var dgCol:GridColumn;
				var jdgCol:joinDataGridColumn;
				var dgColArr:ArrayList = new ArrayList();
				for(var i:int=0; i < _rdgColumns.length; i++){
					var cArr:Array = _rdgColumns[i].split("~");						
					dgCol= new GridColumn(cArr[0]);
					if(cArr[0].indexOf( "." ) != -1){
						jdgCol= new joinDataGridColumn(cArr[0]);
						jdgCol.labelFunction = getLabel;
						if (cArr[2] != "NA"){
							jdgCol.labelFunction = getDateLbl;
							_dateFormat = cArr[2];
						}
						if (cArr[3] != "NA"){
							jdgCol.labelFunction = getCurrLbl;
							_currFormat = cArr[3];
							if(cArr[0] == _sumField){
								sumFormat = "cur";
							}
						}
						if (cArr[4] != "NA"){
							jdgCol.labelFunction = getNumLbl;
							_numFormat = cArr[4];
							if(cArr[0] == _sumField){
								sumFormat = "num";
							}
						}
						if (cArr[5] != "NA"){
							if(cArr[5] =="true"){
								useUTC = true;
							}else{
								useUTC = false;
							}
						}
						if (cArr[6] != "NA"){
							rsortDetails = cArr[6];
							args = rsortDetails.split("|");
							jdgCol.sortDescending = (args[0] == "asc")?false:true;
							if(args[2] == "date"){
								jdgCol.sortCompareFunction = date_sortCompareFunc;
							}
							rsortAC.addItem({data: jdgCol,index: parseInt(args[1])});
						}
						if (_dgFieldAliases){
							jdgCol.headerText = _dgFieldAliases[cArr[0]];
						}
						if (cArr[1] != "NA" && cArr[6] != null){
							jdgCol.headerText = cArr[1];
						}
						dgColArr.addItem(jdgCol);
					}else{
						dgCol= new GridColumn(cArr[0]);
						dgCol.labelFunction = getLabel;
						if (cArr[2] != "NA"){
							dgCol.labelFunction = getDateLbl;
							_dateFormat = cArr[2];
						}
						if (cArr[3] != "NA"){
							dgCol.labelFunction = getCurrLbl;
							_currFormat = cArr[3];
							if(cArr[0] == _sumField){
								sumFormat = "cur";
							}
						}
						if (cArr[4] != "NA"){
							dgCol.labelFunction = getNumLbl;
							_numFormat = cArr[4];
							if(cArr[0] == _sumField){
								sumFormat = "num";
							}
						}
						if (cArr[5] != "NA"){
							if(cArr[5] =="true"){
								useUTC = true;
							}else{
								useUTC = false;
							}
						}
						if (cArr[6] != "NA" && cArr[6] != null){
							rsortDetails = cArr[6];
							args = rsortDetails.split("|");
							dgCol.sortDescending = (args[0] == "asc")?false:true;
							if(args[2] == "date"){
								dgCol.sortCompareFunction = date_sortCompareFunc;
							}
							rsortAC.addItem({data: dgCol, index: parseInt(args[1])});
						}
						if (_rdgFieldAliases){
							dgCol.headerText = _rdgFieldAliases[cArr[0]];
						}
						if (cArr[1] != "NA"){
							dgCol.headerText = cArr[1];
						}
						dgColArr.addItem(dgCol);
					}
				}
				dgCol= new GridColumn("oid");
				dgCol.visible = false;
				dgColArr.addItem(dgCol);
				relatesGrid.columns = dgColArr;
				(relatesGrid.columns.getItemAt(relatesGrid.columnsLength - 1) as GridColumn).width = NaN;
			}
		
			private function exportTo(event:Event):void
			{
				try{
					var data:String;
					var defaultFileName:String;
					if(optiongroup.selectedValue == _exp2csvBtnLbl){
						data = exportCSV(resultsGrid,_csvSep);
						defaultFileName = _csvName + ".csv";
					}else{
						data = exportTXT(resultsGrid);
						defaultFileName = _csvName + ".txt";
					}
					
					var fileReference:FileReference = new FileReference();
					fileReference.save(data, defaultFileName);
				}
				catch(error:Error){
					Alert.show(error.message);
				}
			}
			
			private function rexportTo(event:Event):void
			{
				try{
					var data:String;
					var defaultFileName:String;
					if(roptiongroup.selectedValue == _exp2csvBtnLbl){
						data = exportCSV(relatesGrid,_csvSep);
						defaultFileName = _rcsvName + ".csv";
					}else{
						data = exportTXT(relatesGrid);
						defaultFileName = _rcsvName + ".txt";
					}
					
					var fileReference:FileReference = new FileReference();
					fileReference.save(data,defaultFileName);
				}
				catch(error:Error){
					Alert.show(error.message);
				}
			}
			
			private function msToDate(ms:Number, dateFormat:String, useUTC:Boolean):String
			{
				var date:Date = new Date(ms);
				if (date.milliseconds == 999){
					date.milliseconds++;
				}
				if (useUTC){
					date.minutes += date.timezoneOffset;
				}
				
				if (dateFormat){
					dateFormatter.dateTimePattern = dateFormat;
					var result:String = dateFormatter.format(date);
					if (result){
						return result;
					}else{
						return dateFormatter.errorText;
					}
				}else{
					return date.toLocaleString();
				}
			}
			
			private function exportCSV(dataGrid:DataGrid, csvSeparator:String=",", lineSeparator:String="\n"):String
			{
				try{
					var data:String = "";
					var columnArray:ArrayList = dataGrid.columns as ArrayList;
					var columnCount:int = columnArray.length;
					var dataGridColumn:GridColumn;
					var header:String = "";
					var headerGenerated:Boolean = false;
					var dataProvider:ArrayCollection = ObjectUtil.copy(dataGrid.dataProvider) as ArrayCollection;
					
					//trace(ObjectUtil.toString(dataProvider));
					var rowCount:int = dataProvider.length;
					var dp:Object = null;
					var cursor:IViewCursor = dataProvider.createCursor();
					var j:int = 0;
					
					//loop through rows
					while (!cursor.afterLast){
						var object:Object = null;
						object = cursor.current;
						//loop through all columns for the row
						for(var i:int = 0; i < columnCount; i++){
							dataGridColumn = columnArray.getItemAt(i) as GridColumn;
							//Exclude column data which is invisible (hidden)
							if(!dataGridColumn.visible){
								continue;
							}
							if(dataGridColumn.dataField == "icon"){
								continue;
							}
							if((dataGridColumn.itemRenderer == HyperLinkColumn)||(dataGridColumn.itemRenderer == HyperLinkIconColumn)){
								if(object[dataGridColumn.dataField] != null){
									data += "\"" + object[dataGridColumn.dataField] + "\"";
								}else{
									data += '\"\"';
								}
							}else{
								if(dataGridColumn.itemToLabel(object) != null){
									data += "\""+ dataGridColumn.itemToLabel(object)+ "\"";
								}else{
									data += '\"\"';
								}
							}
							if(i < (columnCount -1))
								data += csvSeparator;
							//generate header of CSV, only if it's not genereted yet
							if (!headerGenerated){
								header += "\"" + dataGridColumn.headerText + "\"";
								if (i < columnCount - 1){
									header += csvSeparator;
								}
							}
						}
						headerGenerated = true;
						if (j < (rowCount - 1)){
							data += lineSeparator;
						}
						j++;
						cursor.moveNext ();
					}
					//set references to null:
					dataProvider = null;
					columnArray = null;
					dataGridColumn = null;		
				}
				catch(error:Error){
					return null;
					Alert.show(error.message);
				}
				return (header + lineSeparator + data);
			}
			
			private function exportTXT(dataGrid:DataGrid, lineSeparator:String="\n"):String
			{
				try{
					var data:String = "";
					var columnArray:ArrayList = dataGrid.columns as ArrayList;
					var columnCount:int = columnArray.length;
					var dataGridColumn:GridColumn;
					var header:String = "";
					var headerGenerated:Boolean = false;
					var dataProvider:ArrayCollection = ObjectUtil.copy(dataGrid.dataProvider) as ArrayCollection;
					
					var rowCount:int = dataProvider.length;
					var dp:Object = null;
					var cursor:IViewCursor = dataProvider.createCursor();
					var j:int = 0;
					
					//loop through rows
					while (!cursor.afterLast){
						var object:Object = null;
						object = cursor.current;
						//loop through all columns for the row
						for(var i:int = 0; i < columnCount; i++){
							dataGridColumn = columnArray.getItemAt(i) as GridColumn;
							//Exclude column data which is invisible (hidden)
							if(!dataGridColumn.visible){
								continue;
							}
							if(dataGridColumn.dataField == "icon"){
								continue;
							}
							if((dataGridColumn.itemRenderer == HyperLinkColumn)||(dataGridColumn.itemRenderer == HyperLinkIconColumn)){
								if(object[dataGridColumn.dataField] != null){
									data += "\"" + object[dataGridColumn.dataField] + "\"";
								}else{
									data += '\"\"';
								}
							}else{
								if(dataGridColumn.itemToLabel(object) != null){
									data += "\""+ dataGridColumn.itemToLabel(object)+ "\"";
								}else{
									data += '\"\"';
								}
							}
							if(i < (columnCount -1)){
								data += "\t";
							}
							//generate header of CSV, only if it's not genereted yet
							if (!headerGenerated){
								header += "\"" + dataGridColumn.headerText + "\"";
								if (i < columnCount - 1){
									header += "\t";
								}
							}
						}
						headerGenerated = true;
						if (j < (rowCount - 1)){
							data += lineSeparator;
						}
						j++;
						cursor.moveNext ();
					}
					//set references to null:
					dataProvider = null;
					columnArray = null;
					dataGridColumn = null;		
				}
				
				catch(error:Error){
					return null;
					Alert.show(error.message);
				}
				return (header + lineSeparator + data);
			}
			
			// this is going to be executed when ever the data provider changes:
			[Bindable("dataChange")]
			private function calcMaxLengths(input:Array):Array {
				// if there are items in the DP:
				if ( input.length > 0 ) {
					// and no SPECIAL child exists:
					if ( getChildByName("$someTempUICToRemoveAfterFinished") == null ) {
						// create new SPECIAL child
						// this is required to call measureText
						// if you use custom data grid item renderer
						// then create instance of it instead of UIComponent:
						uic = new UIComponent();
						// do not show and do not mess with the sizes:
						uic.includeInLayout = false;
						uic.visible = false;
						// name it to leverage get getChildByName method:
						uic.name = "$someTempUICToRemoveAfterFinished";
						// add event listener:
						uic.addEventListener(FlexEvent.CREATION_COMPLETE, onTempUICCreated);
						// add to parent:
						this.addElement(uic);
					}
				}
				// return an input:
				return input;
			}
			
			// called when SPECIAL child is created:
			private function onTempUICCreated(event:FlexEvent):void {
				// keep the ref to the SPECIAL child:
				var renderer:UIComponent = UIComponent(event.target);
				// output - this will contain max size for each column:
				var maxLengths:Object = {};
				// temp variables:
				var key:String = "";
				var i:int=0;
				var h:int=0;
				var dp:Object = resultsGrid.dataProvider;
				// for each item in the DP:
				for ( i=0; i<dp.length; i++ ) {
					var o:Object = dp[i];
					// for each key in the DP row:
					for ( key in o ) {
						// if the output doesn't have current key yet create it and set to 0:
						if ( !maxLengths.hasOwnProperty(key) ) {
							maxLengths[key] = 0;
						}
						// check if it's simple object (may cause unexpected issues for Boolean):
						if ( ObjectUtil.isSimple(o[key]) ) {
							// measure the text:
							var cellMetrics:TextLineMetrics = renderer.measureText(o[key]+"");
							// and if the width is greater than longest found up to now:
							if ( cellMetrics.width > maxLengths[key] ) {
								// set it as the longest one:
								maxLengths[key] = cellMetrics.width;
							}
						}
					}
				}
				
				// apply column sizes:
				for ( key in maxLengths ) {
					for ( i=0; i<resultsGrid.columnsLength; i++ ) {
						// if the column actually exists:
						if ( GridColumn(resultsGrid.columns.getItemAt(i)).dataField.toUpperCase() == key.toUpperCase() ) {
							var cellMetrics2:TextLineMetrics = renderer.measureText(GridColumn(resultsGrid.columns.getItemAt(i)).headerText+"");
							if ( cellMetrics2.width + 18 > Number(maxLengths[key]) + 12 ) {
								GridColumn(resultsGrid.columns.getItemAt(i)).width = cellMetrics2.width + 18;
							} else {
								GridColumn(resultsGrid.columns.getItemAt(i)).width = Number(maxLengths[key]) + 12;
							}							
						}
					}
				}
				//Now check if a hyperlink field has an alias and set the field width based on that alias or the header text
				for each (var obj:Object in hypercols){
					for ( i=0; i<resultsGrid.columnsLength; i++ ) {
						if ( GridColumn(resultsGrid.columns.getItemAt(i)).dataField.toUpperCase() == obj.field.toUpperCase()) {
							if(obj.alias != "NA"){
								cellMetrics2 = renderer.measureText(GridColumn(resultsGrid.columns.getItemAt(i)).headerText+"");
								var cellMetrics3:TextLineMetrics = renderer.measureText(obj.alias + "");
								if(cellMetrics3.width + 18 < cellMetrics2.width + 18){
									GridColumn(resultsGrid.columns.getItemAt(i)).width = cellMetrics2.width + 18;
								}else{
									GridColumn(resultsGrid.columns.getItemAt(i)).width = cellMetrics3.width + 18;
								}
							}
						}
					}
				}
				// cleanup:
				try{
					removeElement(uic);
				}
				catch(error:Error){};
			}
			
			// this is going to be executed when ever the data provider changes:
			[Bindable("dataChange")]
			private function rcalcMaxLengths(input:Array):Array {
				// if there are items in the DP:
				if ( input.length > 0 ) {
					// and no SPECIAL child exists:
					if ( getChildByName("$rsomeTempUICToRemoveAfterFinished") == null ) {
						// create new SPECIAL child
						// this is required to call measureText
						// if you use custom data grid item renderer
						// then create instance of it instead of UIComponent:
						uic = new UIComponent();
						// do not show and do not mess with the sizes:
						uic.includeInLayout = false;
						uic.visible = false;
						// name it to leverage get getChildByName method:
						uic.name = "$rsomeTempUICToRemoveAfterFinished";
						// add event listener:
						uic.addEventListener(FlexEvent.CREATION_COMPLETE, ronTempUICCreated);
						// add to parent:
						this.addElement(uic);
					}
				}
				// return an input:
				return input;
			}
			
			// called when SPECIAL child is created:
			private function ronTempUICCreated(event:FlexEvent):void {
				// keep the ref to the SPECIAL child:
				var renderer:UIComponent = UIComponent(event.target);
				// output - this will contain max size for each column:
				var maxLengths:Object = {};
				// temp variables:
				var key:String = "";
				var i:int=0;
				var h:int=0;
				var dp:Object = relatesGrid.dataProvider;
				// for each item in the DP:
				for ( i=0; i<dp.length; i++ ) {
					var o:Object = dp[i];
					// for each key in the DP row:
					for ( key in o ) {
						// if the output doesn't have current key yet create it and set to 0:
						if ( !maxLengths.hasOwnProperty(key) ) {
							maxLengths[key] = 0;
						}
						// check if it's simple object (may cause unexpected issues for Boolean):
						if ( ObjectUtil.isSimple(o[key]) ) {
							// measure the text:
							var cellMetrics:TextLineMetrics = renderer.measureText(o[key] + "W");
							// and if the width is greater than longest found up to now:
							if ( cellMetrics.width > maxLengths[key] ) {
								// set it as the longest one:
								maxLengths[key] = cellMetrics.width;
							}
						}
					}
				}
				
				// apply column sizes:
				for ( key in maxLengths ) {
					for ( i=0; i<relatesGrid.columnsLength; i++ ) {
						// if the column actually exists:
						if ( GridColumn(relatesGrid.columns.getItemAt(i)).dataField.toUpperCase() == key.toUpperCase() ) {
							var cellMetrics2:TextLineMetrics = renderer.measureText(GridColumn(relatesGrid.columns.getItemAt(i)).headerText + "W");
							if ( cellMetrics2.width + 18 > Number(maxLengths[key]) + 12 ) {
								GridColumn(relatesGrid.columns.getItemAt(i)).width = cellMetrics2.width + 18;
							} else {
								GridColumn(relatesGrid.columns.getItemAt(i)).width = Number(maxLengths[key]) + 12;
							}							
						}
					}
				}
				//Now check if a hyperlink field has an alias and set the field width based on that alias or the header text
				for each (var obj:Object in rhypercols){
					for ( i=0; i<relatesGrid.columnsLength; i++ ) {
						if ( GridColumn(relatesGrid.columns.getItemAt(i)).dataField.toUpperCase() == obj.field.toUpperCase()) {
							if(obj.alias != "NA"){
								cellMetrics2 = renderer.measureText(GridColumn(relatesGrid.columns.getItemAt(i)).headerText + "W");
								var cellMetrics3:TextLineMetrics = renderer.measureText(obj.alias + "W");
								if(cellMetrics3.width + 18 < cellMetrics2.width + 18){
									GridColumn(relatesGrid.columns.getItemAt(i)).width = cellMetrics2.width + 18;
								}else{
									GridColumn(relatesGrid.columns.getItemAt(i)).width = cellMetrics3.width + 18;
								}
							}
						}
					}
				}
				// cleanup:
				removeElement(uic);
			}
			
			private function getLabel(item:Object,column:GridColumn):String
			{
				return item[column.dataField];
			}
			
			private function getDateLbl(item:Object,column:GridColumn):String
			{
				var dateMS:Number = Number(item[column.dataField]);
				var retVal:String = "";
				var rVal:String = item[column.dataField];
				if(rVal == null){
					//do nothing
				}else{
					if (!isNaN(dateMS)){
						//Fix the date format to use the Spark format
						_dateFormat = _dateFormat.replace(/D/g, "d").replace(/Y/g, "y");
						retVal = msToDate(dateMS, _dateFormat, useUTC);
					}
				}
				return retVal;
			}
			
			private function getNumLbl(item:Object,column:GridColumn):String
			{
				var args:Array = _numFormat.split("|");
				if(args[0]){
					numFormatter.fractionalDigits = args[0];
				}
				if(args[1]){
					numFormatter.groupingSeparator = args[1];
					numFormatter.useGrouping = true;
				}else{
					numFormatter.useGrouping = false;
				}
				if(args[2]){
					numFormatter.decimalSeparator = args[2];
				}
				return numFormatter.format(item[column.dataField]);
			}
			
			private function getCurrLbl(item:Object,column:GridColumn):String
			{
				var args:Array = _currFormat.split("|");
				if(args[0]){
					currFormatter.currencySymbol = args[0];
					currFormatter.useCurrencySymbol = true;
				}
				if(args[1]){
					currFormatter.fractionalDigits = args[1];
				}
				if(args[2]){
					currFormatter.groupingSeparator = args[2];
					currFormatter.useGrouping = true;
				}else{
					currFormatter.useGrouping = false;
				}
				if(args[3]){
					currFormatter.decimalSeparator = args[3];
				}
				return currFormatter.format(item[column.dataField]);
			}
			
			private function labelFunc2(item:Object, column:GridColumn):String
			{
				return item[column.dataField];
			}
			
			private function labelFunc(item:Object, column:GridColumn):String
			{
				var retVal:String = "Get Hyperlink";
				for each (var obj:Object in hypercols){
					if(obj.field.toUpperCase() == column.dataField.toUpperCase()){
						if(obj.alias != "NA"){
							retVal = obj.alias;
						}
					}
				}
				if (item[column.dataField] == "" || item[column.dataField] == " " || 
					item[column.dataField] == "null" || item[column.dataField] == "unavailable"){
					retVal = "";
				}
				return retVal;
			}
			
			private function dgHyperColumns(value:Array):void
			{
				_dgHyperColumns = value;
				var dgCol:GridColumn;
				var dgColArr:ArrayList = resultsGrid.columns as ArrayList;
				hypercols = new ArrayCollection();
				for(var i:int=0; i < _dgHyperColumns.length; i++){
					var cArr:Array = _dgHyperColumns[i].split("~");
					hypercols.addItem({field: cArr[0], name: cArr[1], alias: cArr[2], pre: cArr[3], suf: cArr[4], icon: cArr[5]});
					dgCol= new GridColumn(cArr[0]);
					dgCol.labelFunction = labelFunc2;
					if (cArr[2] != "NA"){
						dgCol.labelFunction = labelFunc;
					}
					if (_dgFieldAliases){
						dgCol.headerText = _dgFieldAliases[cArr[0]];
					}
					if (cArr[1] != "NA"){
						dgCol.headerText = cArr[1];
					}
					if (cArr[5] != "NA"){
						dgCol.dataTipField = cArr[5];
						dgCol.showDataTips = false;
						dgCol.itemRenderer = new ClassFactory(widgets.eSearch.HyperLinkIconColumn);
					}else{
						dgCol.itemRenderer = new ClassFactory(widgets.eSearch.HyperLinkColumn);
					}
					dgColArr.addItem(dgCol);
				}
				resultsGrid.columns = dgColArr;
			}
			
			private function rdgHyperColumns(value:Array):void
			{
				_rdgHyperColumns = value;
				var dgCol:GridColumn;
				var dgColArr:ArrayList = relatesGrid.columns as ArrayList;
				rhypercols = new ArrayCollection();
				for(var i:int=0; i < _rdgHyperColumns.length; i++){
					var cArr:Array = _rdgHyperColumns[i].split("~");
					rhypercols.addItem({field: cArr[0], name: cArr[1], alias: cArr[2], pre: cArr[3], suf: cArr[4], icon: cArr[5]});
					dgCol= new GridColumn(cArr[0]);
					dgCol.labelFunction = labelFunc2;
					if (cArr[2] != "NA"){
						dgCol.labelFunction = labelFunc;
					}
					if (_dgFieldAliases){
						dgCol.headerText = _rdgFieldAliases[cArr[0]];
					}
					if (cArr[1] != "NA"){
						dgCol.headerText = cArr[1];
					}
					if (cArr[5] != "NA"){
						dgCol.dataTipField = cArr[5];
						dgCol.showDataTips = false;
						dgCol.itemRenderer = new ClassFactory(widgets.eSearch.HyperLinkIconColumn);
					}else{
						dgCol.itemRenderer = new ClassFactory(widgets.eSearch.HyperLinkColumn);
					}
					dgColArr.addItem(dgCol);
				}
				relatesGrid.columns = dgColArr;
			}

			private function dProvider(value:Object):void
			{
				_data = ObjectUtil.copy(value) as Array;
				for each(var attributes:Object in _data){
					for(var i:int=0; i<hypercols.length; i++){
						//concatenate if
						if(String(attributes[hypercols[i].field]) != "" 
							&& String(attributes[hypercols[i].field]) != " " 
							&& String(attributes[hypercols[i].field]) != null
							&& String(attributes[hypercols[i].field]) != "unavailable"){
							var pre:String = (hypercols[i].pre == "NA") ? "" : String(hypercols[i].pre);
							var suf:String = (hypercols[i].suf == "NA") ? "" : String(hypercols[i].suf);
							attributes[hypercols[i].field] = String(pre + String(attributes[hypercols[i].field]) + suf);
						}
					}
					if(_hasRelates){
						attributes["icon"] = "defined";
					}
					if(_layerDetails){
						var fld:Object;
						var cVal:CodedValue;
						var cDomain:CodedValueDomain;
						for each (fld in _layerDetails.fields){
							var typeID:String = _layerDetails.typeIdField ? attributes[fld.name] : null;
							if (_layerDetails.typeIdField && fld.name.toUpperCase() == _layerDetails.typeIdField.toUpperCase()){
								// replace value with feature type name
								var featureType:FeatureType = getFeatureType(typeID,_layerDetails);
								if (featureType && featureType.name){
									attributes[fld.name] = featureType.name;
								}
							}else{
								// replace value with coded value name if one exists
								if (typeID){
									var fType:FeatureType = getFeatureType(typeID,_layerDetails);
									if (fType){
										cDomain = fType.domains[fld.name] as CodedValueDomain;
									}
								}else if(fld.domain){
									cDomain = fld.domain as CodedValueDomain;
								}else{
									cDomain = null;
								}
								if (cDomain){
									for each (var codedValue:CodedValue in cDomain.codedValues){
										if (attributes[fld.name] == codedValue.code){
											attributes[fld.name] = codedValue.name;
											break;
										}
									}
								}
							}
						}
					} 
				}
				resultsGrid.dataProvider = new ArrayCollection(calcMaxLengths(_data));
				var reset:Vector.<int> = Vector.<int>([]);
				resultsGrid.columnHeaderGroup.visibleSortIndicatorIndices = reset;
				
				if(_sumField){
					try{
						var total:Number = 0;
						for each (var row:Object in resultsGrid.dataProvider) {
							total += Number(row[_sumField]);
						}
						if(sumFormat == "num"){
							var args:Array = _numFormat.split("|");
							if(args[0]){
								numFormatter.fractionalDigits = args[0];
							}
							if(args[1]){
								numFormatter.groupingSeparator = args[1];
								numFormatter.useGrouping = true;
							}else{
								numFormatter.useGrouping = false;
							}
							if(args[2]){
								numFormatter.decimalSeparator = args[2];
							}
							taSum.text = numFormatter.format(total);
						}else if(sumFormat == "cur"){
							var args2:Array = _currFormat.split("|");
							if(args[0]){
								currFormatter.currencySymbol = args[0];
								currFormatter.useCurrencySymbol = true;
							}
							if(args[1]){
								currFormatter.fractionalDigits = args[1];
							}
							if(args[2]){
								currFormatter.groupingSeparator = args[2];
								currFormatter.useGrouping = true;
							}else{
								currFormatter.useGrouping = false;
							}
							if(args[3]){
								currFormatter.decimalSeparator = args[3];
							}
							taSum.text = currFormatter.format(total);
						}else{
							taSum.text = total.toString();
						}
					}
					catch (error:Error){
						sumVisible = false;
					}
				}
				var isrt:Sort = new Sort();
				isrt.fields = [new SortField("index",false,true)];
				sortAC.sort = isrt;
				sortAC.refresh();
				var sortArr:Array = [];
				for(var s:int = 0; s < sortAC.length; s++){
					sortArr.push(resultsGrid.columns.getItemIndex(sortAC[s].data));
				}
				
				var columnIndexes:Vector.<int> = Vector.<int>(sortArr);
				resultsGrid.sortByColumns(columnIndexes, true);
			}
			
			private function getFeatureType(typeID:String, lDtls:LayerDetails):FeatureType
			{
				var result:FeatureType;
				
				for each (var featureType:FeatureType in lDtls.types){
					if (typeID == featureType.id){
						result = featureType;
						break;
					}
				}
				
				return result;
			}
			
			private function rdProvider(value:Object):void
			{
				_rdata = ObjectUtil.copy(value)  as Array;
				for each(var attributes:Object in _rdata){
					for(var i:int=0; i<rhypercols.length; i++){
						//concatenate if
						if(String(attributes[rhypercols[i].field]) != "" && String(attributes[rhypercols[i].field]) != " " && String(attributes[rhypercols[i].field]) != null){
							var pre:String = (rhypercols[i].pre == "NA") ? "" : String(rhypercols[i].pre);
							var suf:String = (rhypercols[i].suf == "NA") ? "" : String(rhypercols[i].suf);
							attributes[rhypercols[i].field] = pre + String(attributes[rhypercols[i].field]) + suf;
						}
					}
					
					if(_rlayerDetails){
						var fld:Object;
						var cVal:CodedValue;
						var cDomain:CodedValueDomain;
						for each (fld in _rlayerDetails.fields){
							var typeID:String = _rlayerDetails.typeIdField ? String(attributes[_rlayerDetails.typeIdField]) : null;
							if (fld.name == _rlayerDetails.typeIdField){
								// replace value with feature type name
								var featureType:FeatureType = getFeatureType(typeID,_rlayerDetails);
								if (featureType && featureType.name){
									attributes[fld.name] = featureType.name;
								}
							}else{
								// replace value with coded value name if one exists
								if (typeID){
									var fType:FeatureType = getFeatureType(typeID,_rlayerDetails);
									if (fType){
										cDomain = fType.domains[fld.name] as CodedValueDomain;
									}
								}else{
									cDomain = fld.domain as CodedValueDomain;
								}
								
								if (cDomain){
									for each (var codedValue:CodedValue in cDomain.codedValues){
										if (attributes[fld.name] == codedValue.code){
											attributes[fld.name] = codedValue.name;
											break;
										}
									}
								}
							}
						}
					} 
				} 
				relatesGrid.dataProvider = new ArrayCollection(rcalcMaxLengths(_rdata));
				var reset:Vector.<int> = Vector.<int>([]);
				relatesGrid.columnHeaderGroup.visibleSortIndicatorIndices = reset;
				
				if(_rsumField){
					try{
						var total:Number = 0;
						for each (var row:Object in relatesGrid.dataProvider) {
							total += Number(row[_rsumField]);
						}
						if(rsumFormat == "num"){
							var args:Array = _numFormat.split("|");
							if(args[0]){
								numFormatter.fractionalDigits = args[0];
							}
							if(args[1]){
								numFormatter.groupingSeparator = args[1];
								numFormatter.useGrouping = true;
							}else{
								numFormatter.useGrouping = false;
							}
							if(args[2]){
								numFormatter.decimalSeparator = args[2];
							}
							rtaSum.text = numFormatter.format(total);
						}else if(rsumFormat == "cur"){
							var args2:Array = _currFormat.split("|");
							if(args[0]){
								currFormatter.currencySymbol = args[0];
								currFormatter.useCurrencySymbol = true;
							}
							if(args[1]){
								currFormatter.fractionalDigits = args[1];
							}
							if(args[2]){
								currFormatter.groupingSeparator = args[2];
								currFormatter.useGrouping = true;
							}else{
								currFormatter.useGrouping = false;
							}
							if(args[3]){
								currFormatter.decimalSeparator = args[3];
							}
							rtaSum.text = currFormatter.format(total);
						}else{
							rtaSum.text = total.toString();
						}
					}
					catch (error:Error){
						rsumVisible = false;
					}
				}
				
				var isrt:Sort = new Sort();
				isrt.fields = [new SortField("index",false,true)];
				rsortAC.sort = isrt;
				rsortAC.refresh();
				var rsortArr:Array = [];
				for(var s:int = 0; s < rsortAC.length; s++){
					rsortArr.push(relatesGrid.columns.getItemIndex(rsortAC[s].data));
				}
				
				var columnIndexes:Vector.<int> = Vector.<int>(rsortArr);
				relatesGrid.sortByColumns(columnIndexes, true);
			}
			
			private function panel_rollOutHandler(event:MouseEvent):void
			{
				movingPanel = true;
				panelOut.end();
				panelIn.play();
			}
			
			private function panel_rollOverHandler(event:MouseEvent):void
			{
				movingPanel = true;
				panelIn.end();
				panelOut.play();
			}
			
			private function sharedDataUpdated(event:AppEvent):void
			{
				var data:Object = event.data;
				
				 if (data.key == "configFixedDatagrid"){
					if (data.collection[0]){
						var theObj:Object = data.collection[0];
						mWidgetTitle = theObj.widgetTitle;
						_layerDetails = theObj.layerDetails;
						_featLayer = theObj.featLayer;
						_exp2csvBtnLbl = theObj.csvExportOptionLbl;
						_exp2txtBtnLbl = theObj.txtExportOptionLbl;
						_exportButtonLbl = theObj.ExportButtonLbl;
						_csvSep = theObj.csvSeperator;
						_dgFieldAliases = theObj.dgFieldAliases;
						_csvName = theObj.csvName;
						sumField(theObj.sumField);
						_labelSum = theObj.labelSum;
						_hasRelates = theObj.hasRelates;
						dgColumns(theObj.dgColumns);
						dgHyperColumns(theObj.dgHyperColumns);
						dProvider(theObj.dProvider);
						_graLyr = theObj.graphicslayer;
						_zoomScale = theObj.zoomScale;
						_zoomPercent = theObj.zoomPercent;
						_bWidget = theObj.ownerWidget;
						_enableExport = theObj.enableExport;
						_widgetInteract = theObj.widgetInteract;
						_disableRelateTab = (theObj.disableRelateTab)?false:true;
						_relateIcon = theObj.relateIcon;
						_relateTooltip = theObj.relateToolTip;
						tabs.selectedIndex = 0;
					}
				}
				if (data.key == "configRelateFixedDatagrid"){
					if (data.collection[0]){
						var therObj:Object = data.collection[0];
						_rlayerDetails = therObj.layerDetails;
						_rdgFieldAliases = therObj.dgFieldAliases;
						_rcsvName = therObj.csvName;
						rsumField(therObj.sumField);
						_rlabelSum = therObj.labelSum;
						rdgColumns(therObj.dgColumns);
						rdgHyperColumns(therObj.dgHyperColumns);
						rdProvider(therObj.dProvider);
						_renableExport = therObj.enableExport;
						_relateIcon = therObj.relateIcon;
						_relateTooltip = therObj.relateToolTip;
						if(!_disableRelateTab){
							_disableRelateTab == true;
						}
					}
				}
				if (data.key == "clearRelateFixedDatagrid"){
					if(relatesGrid.dataProvider == null || relatesGrid.dataProvider.length == 0){
					}else{
						relatesGrid.dataProvider.removeAll();
						rsumVisible = false;
						_rlabelSum = "";
						//Reset the datagrids sort indicators
						var rreset:Vector.<int> = Vector.<int>([]);
						relatesGrid.columnHeaderGroup.visibleSortIndicatorIndices = rreset;
						_renableExport = false;
					}
				}
				if (data.key == "clearFixedDatagrid"){
					if(resultsGrid.dataProvider == null || resultsGrid.dataProvider.length == 0){
					}else{
						resultsGrid.dataProvider.removeAll();
						//Reset the datagrids sort indicators
						var reset:Vector.<int> = Vector.<int>([]);
						resultsGrid.columnHeaderGroup.visibleSortIndicatorIndices = reset;
						sumVisible = false;
						_labelSum = "";
						_enableExport = false;
					}
				}
				if (data.key == "scrollFixedDataGrid"){
					if (data.collection[0]){
						var theObj2:Object = data.collection[0];
						Hits.length = 0;
						for each(var attributes:Object in resultsGrid.dataProvider){
							if (attributes.oid === theObj2.searchResultoid){
								var myCursor:IViewCursor = (resultsGrid.dataProvider as ArrayCollection).createCursor();
								while(!myCursor.afterLast){
									if(myCursor.current.oid == attributes.oid){
										Hits.push(myCursor.current);
									}
									myCursor.moveNext();
								}
								resultsGrid.selectedIndex = resultsGrid.dataProvider.getItemIndex(Hits[0])                        
							}
						}
						if(resultsGrid.selectedIndex > -1){
							resultsGrid.ensureCellIsVisible(resultsGrid.selectedIndex);
						}
					}
				}
				if (data.key == "switch2RelateTabFixedDataGrid"){
					if(tabs.selectedIndex != 1){
						tabs.selectedIndex = 1;
						if(!_disableRelateTab){
							_disableRelateTab == true;
						}
					}
				} 
			}
	
			private function onItemRollOver(event:GridEvent):void
			{
				if(_widgetInteract  && _bWidget){
					if(!event.itemRenderer || !event.itemRenderer.data){
						return;
					}
					_bWidget.highlightDataGroupItemByOID(event.itemRenderer.data.oid);
					var searchResult:* = findSearchResultByOID(event.itemRenderer.data.oid);
					if(searchResult.graphic && searchResult.point){
						if (map.extent.containsXY(searchResult.point.x, searchResult.point.y)){
							showInfoWindow2(searchResult);
						}else{
							hideInfoWindow();
						}
					}
				}
			}
			
			private function hideInfoWindow():void
			{
				if (map.infoWindow.contentOwner &&
					((map.infoWindow.contentOwner is Graphic && Graphic(map.infoWindow.contentOwner).graphicsLayer === _graLyr) || map.infoWindow.contentOwner is Map))
				{
					map.infoWindow.hide();
				}
			}
			
			private function showInfoWindow2(infoData:Object):void
			{
				var showHighlightPoint:MapPoint = infoData.point as MapPoint;
				popUpRenderer.popUpInfo = configurePopUpInfo(infoData.links);
				popUpRenderer.graphic = infoData.graphic;
				popUpRenderer.setStyle("skinClass", widgets.eSearch.skins.PopUpRendererSkin);
				map.infoWindow.content = popUpRenderer;
				map.infoWindow.contentOwner = popUpRenderer.graphic;
				map.infoWindow.show(showHighlightPoint);
			}
			
			private function configurePopUpInfo(links:Array):EnhancedPopUpInfo
			{
				var popUpInfo:EnhancedPopUpInfo = new EnhancedPopUpInfo;
				
				popUpInfo.title = "{title}";
				popUpInfo.description = "{content}";
				popUpInfo.showAttachments = true;
				popUpInfo.featLayer = _featLayer;
				var pminfos:Array = [];
				
				for(var l:int=0; l<links.length; l++){
					if (links[l].link){
						var pos:Number = links[l].link.length - 4;
						var sfx:String = String(links[l].link).substr(pos, 4).toLowerCase();
						if ((sfx == ".jpg") || (sfx == ".png") || (sfx == ".gif")){ // use PopUpMediaInfo if it is an image
							var popUpMediaInfo:PopUpMediaInfo = new PopUpMediaInfo;
							popUpMediaInfo.type = PopUpMediaInfo.IMAGE;
							popUpMediaInfo.imageLinkURL = links[l].link;
							popUpMediaInfo.imageSourceURL = links[l].link;
							pminfos.push(popUpMediaInfo);
						}else{
							var lText:String = (links[l].alias != "") ? links[l].alias : links[l].link;
							popUpInfo.description += "<br /><a href='" + links[l].link + "'>" + lText + "</a>"
						}
					}
				}
				popUpInfo.popUpMediaInfos = pminfos;
				return popUpInfo;
			}
			
			private function highLightSel(event:Event):void
			{
				resultsGrid.selectedItem
				if(resultsGrid.selectedItem && _bWidget){
					_bWidget.highlightDataGroupItemByOID(resultsGrid.selectedItem.oid);
				}
			}
			
			private function unhighLightSel(event:Event):void
			{
				if(resultsGrid.selectedItem && _bWidget){
					_bWidget.unhighlightDataGroupItems();
				}
			}
			
			private function onItemRollOut(event:GridEvent):void
			{
				if(_widgetInteract && _bWidget){
					_bWidget.unhighlightDataGroupItems();
				}
			}
			
			private function findSearchResultByOID(oid:Number):*
			{
				var retSR:*;	
				for (var i:Number = 0; i < _bWidget.searchResultAC.length; i++){
					var sr:* = _bWidget.searchResultAC[i];
					if(sr.oid == oid){
						retSR = sr;
						break;
					}
				}
				return retSR;
			}
			
			private function clickRow(event:GridEvent):void
			{
				if(!event.itemRenderer || !event.itemRenderer.data){
					return;
				}
				var searchResult:* = findSearchResultByOID(event.itemRenderer.data.oid);
				if(!searchResult.graphic){
					if(event.itemRenderer is HyperLinkIconColumn){
						_bWidget.standaloneRelate(event.itemRenderer.data.oid);
					}
					return;
				}
				if(event.itemRenderer is HyperLinkIconColumn){
					_bWidget.clickSearchRelateResult(searchResult);
					return;
				}
				var pt:MapPoint = searchResult.point;
				var map:Map = ViewerContainer.getInstance().mapManager.map;
				if (searchResult.graphic.geometry){
					if (searchResult.graphic.geometry.type == Geometry.MAPPOINT){
						if(isNaN(_zoomScale)){
							map.zoom(1 / 16, searchResult.point);
							map.centerAt(searchResult.point);
						}else{
							if (map.scale > _zoomScale){
								map.scale = _zoomScale;
							}
							map.centerAt(searchResult.point);
						}
					}else{
						if(isNaN(_zoomScale)){
							map.extent = searchResult.graphic.geometry.extent.expand(_zoomPercent);
							if (!map.extent.contains(searchResult.graphic.geometry)){
								map.level--;
							}
						}else{
							if (map.scale > _zoomScale){
								map.scale = _zoomScale;
							}
							map.centerAt(searchResult.point);
						}
					}
					callLater(showInfoWindow2, [searchResult]);
				}
			}
			
			private function getFileName(o:Object, c:GridColumn):String
			{
				return _relateTooltip;
			}
			
			protected function dataGridResizeHandler(event:Event):void
			{
				if(event.target.columnsLength > 0){
					(event.target.columns.getItemAt(event.target.columnsLength - 1) as GridColumn).width = NaN;
				}
			}
			
			protected function panel_moveHandler(event:MoveEvent):void
			{
				if(movingPanel){
					movingPanel = false;
				}else{
					event.preventDefault();
					event.stopImmediatePropagation();
					event.target.y = 175;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="optiongroup"/>
		<s:RadioButtonGroup id="roptiongroup"/>
	</fx:Declarations>
	<s:VGroup gap="-1" height="100%" width="100%" id="panel" move="panel_moveHandler(event)">
		<s:TabBar id="tabs" dataProvider="{vs}" skinClass="widgets.eSearch.skins.TabBarSkin"
				  mouseOut="panel_rollOutHandler(event)" 
				  mouseOver="panel_rollOverHandler(event)"/>
		<mx:ViewStack id="vs" height="100%" width="100%" creationPolicy="all" mouseOut="panel_rollOutHandler(event)" 
					  mouseOver="panel_rollOverHandler(event)">
			<s:NavigatorContent label="Search Results" width="100%"  height="100%" backgroundColor="{getStyle('chromeColor')}" backgroundAlpha="{getStyle('backgroundAlpha')}">
				<s:SkinnableContainer height="100%" width="100%" backgroundAlpha="{getStyle('backgroundAlpha')}" backgroundColor="{getStyle('chromeColor')}">
					<s:VGroup gap="0" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" >
						<s:DataGrid id="resultsGrid" height="100%" width="100%"
									 resize="dataGridResizeHandler(event)"
									 updateComplete="dataGridResizeHandler(event)"
									 gridClick="clickRow(event)"
									 gridRollOut="onItemRollOut(event)"
									 gridRollOver="onItemRollOver(event)"
									 rollOut="highLightSel(event)" 
									 rollOver="unhighLightSel(event)"
									 horizontalScrollPolicy="auto"
									 contentBackgroundAlpha="{getStyle('styleAlpha')}"
									 contentBackgroundColor="{getStyle('chromeColor')}"
									 alternatingRowColors="{[getStyle('chromeColor'),getStyle('chromeColor')]}"/>
						<s:HGroup verticalAlign="middle" paddingLeft="4" paddingTop="3" paddingBottom="3" paddingRight="30" horizontalAlign="right" height="34" width="100%" visible="{_enableExport || sumVisible}" includeInLayout="{_enableExport || sumVisible}">
							<s:Label id="lblSum" text="{_labelSum}" visible="{sumVisible}" includeInLayout="{sumVisible}"/>
							<s:TextArea id="taSum" heightInLines="1" editable="false" borderVisible="false" visible="{sumVisible}" includeInLayout="{sumVisible}"/>
							<s:RadioButton label="{_exp2csvBtnLbl}" groupName="optiongroup" selected="true" visible="{_enableExport}" includeInLayout="{_enableExport}"/>
							<s:RadioButton label="{_exp2txtBtnLbl}" groupName="optiongroup" visible="{_enableExport}" includeInLayout="{_enableExport}"/>
							<s:Button label="{_exportButtonLbl}" id="Export" click="exportTo(event)" skinClass="widgets.eSearch.skins.ExportButtonSkin" visible="{_enableExport}" includeInLayout="{_enableExport}"/>
						</s:HGroup>
					</s:VGroup>
				</s:SkinnableContainer>
			</s:NavigatorContent>
			<s:NavigatorContent label="Relate Results" width="100%" height="100%" backgroundColor="{getStyle('chromeColor')}" backgroundAlpha="{getStyle('backgroundAlpha')}" maxWidth="{appWidth}"
								enabled="{_disableRelateTab}" >
				<s:SkinnableContainer height="100%" width="100%" backgroundAlpha="{getStyle('backgroundAlpha')}" backgroundColor="{getStyle('chromeColor')}" maxWidth="{appWidth}">
					<s:VGroup gap="0" height="100%" width="100%" horizontalAlign="center" verticalAlign="middle" maxWidth="{appWidth}">
						<s:DataGrid id="relatesGrid" height="100%" width="100%"
									horizontalScrollPolicy="auto"
									rollOut="highLightSel(event)"
									rollOver="unhighLightSel(event)"
									contentBackgroundAlpha="{getStyle('styleAlpha')}"
									contentBackgroundColor="{getStyle('chromeColor')}"
									alternatingRowColors="{[getStyle('chromeColor'),getStyle('chromeColor')]}"
									updateComplete="dataGridResizeHandler(event)"
									resize="dataGridResizeHandler(event)"/>
						<s:HGroup verticalAlign="middle" paddingLeft="4" paddingTop="3" paddingBottom="3" paddingRight="30" horizontalAlign="right" height="34" width="100%"
								  visible="{_renableExport || rsumVisible}" includeInLayout="{_renableExport || rsumVisible}">
							<s:Label id="rlblSum" text="{_rlabelSum}" visible="{rsumVisible}" includeInLayout="{rsumVisible}"/>
							<s:TextArea id="rtaSum" heightInLines="1" editable="false" borderVisible="false" visible="{rsumVisible}" includeInLayout="{rsumVisible}"/>
							<s:RadioButton label="{_exp2csvBtnLbl}" groupName="roptiongroup" selected="true" visible="{_renableExport}" includeInLayout="{_renableExport}"/>
							<s:RadioButton label="{_exp2txtBtnLbl}" groupName="roptiongroup" visible="{_renableExport}" includeInLayout="{_renableExport}"/>
							<s:Button label="{_exportButtonLbl}" id="rExport" click="rexportTo(event)" skinClass="widgets.eSearch.skins.ExportButtonSkin" visible="{_renableExport}" includeInLayout="{_renableExport}"/>
						</s:HGroup>
					</s:VGroup>
				</s:SkinnableContainer>
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>
</viewer:BaseWidget>